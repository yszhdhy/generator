package ${controllerPackage};

import java.util.Arrays;
import java.util.Map;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.apache.commons.lang.StringUtils;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
##import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.*;

import ${EntityPackage}.${className}Entity;
import ${ServicePackage}.${className}Service;
##import ${mainPath}.common.utils.PageUtils;
import ${ResultPackage}.Result;



/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${moduleName}/${pathName}")
@CrossOrigin
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @GetMapping("{page}/{limit}")
##    @RequiresPermissions("${moduleName}:${pathName}:list")
    public Result list(@PathVariable Long page,
                       @PathVariable Long limit,
                       String key
                       /* 自定义查询条件 vo 可以根据SysUserController 接口实现*/){

##        PageUtils page = ${classname}Service.queryPage(params);
        //创建page对象
        Page<${className}Entity> pageParam = new Page<>(page,limit);

       String columnNames = "${columnNames}";
        String[] fieldNames = columnNames.split(",");

        //封装条件，判断条件值不为空
        QueryWrapper<${className}Entity> wrapper = new QueryWrapper<>();
        if(!StringUtils.isEmpty(key)){
            // 打印每个字段名
            for (String fieldName : fieldNames) {
                wrapper.or().like(fieldName.trim(), key);
            }
        }

        //调用mp的方法实现条件分页查询
        IPage<${className}Entity> pageModel = ${classname}Service.page(pageParam, wrapper);

        return Result.ok(pageModel);
    }


    /**
     * 信息
     */
    @GetMapping("/info/{${pk.attrname}}")
##    @RequiresPermissions("${moduleName}:${pathName}:info")
    public Result info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
		${className}Entity ${classname} = ${classname}Service.getById(${pk.attrname});

        return Result.ok(${classname});
    }

    /**
     * 保存
     */
    @PostMapping("/save")
##    @RequiresPermissions("${moduleName}:${pathName}:save")
    public Result save(@RequestBody ${className}Entity ${classname}){
		${classname}Service.save(${classname});

        return Result.ok();
    }

    /**
     * 修改
     */
    @PostMapping("/update")
##    @RequiresPermissions("${moduleName}:${pathName}:update")
    public Result update(@RequestBody ${className}Entity ${classname}){
		${classname}Service.updateById(${classname});

        return Result.ok();
    }

    /**
     * 删除
     */
    @PostMapping("/delete")
##    @RequiresPermissions("${moduleName}:${pathName}:delete")
    public Result delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
		${classname}Service.removeByIds(Arrays.asList(${pk.attrname}s));

        return Result.ok();
    }

    /**
     * 根据单个id删除
     */
    @GetMapping("/deleteById/{id}")
    public Result deleteById(@PathVariable ${pk.attrType} ${pk.attrname}){
            ${classname}Service.removeById(${pk.attrname});

        return Result.ok();
    }

}
